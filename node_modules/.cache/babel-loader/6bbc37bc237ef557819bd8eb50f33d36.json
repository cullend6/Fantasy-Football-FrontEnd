{"ast":null,"code":"export default function addToTeam(player, currentPlayers, maxAmount, team) {\n  const prevPlayers = currentPlayers;\n  const prevValue = getTeamValue(team, currentPlayers, 4);\n  let newPlayers = [];\n\n  if (currentPlayers.length === maxAmount) {\n    currentPlayers.shift();\n    newPlayers = [...currentPlayers, player];\n  }\n\n  newPlayers = [...currentPlayers, player];\n  const newValue = getTeamValue(team, newPlayers, player.element_type - 1);\n  let result = {};\n\n  const _validateTeam = validateTeam(newValue, prevPlayers, player, team),\n        isValidated = _validateTeam.isValidated,\n        message = _validateTeam.message;\n\n  isValidated ? result = {\n    newPlayers,\n    newValue\n  } : result = {\n    newPlayers: prevPlayers,\n    newValue: prevValue,\n    message\n  };\n  return result;\n}\n\nconst getTeamValue = ({\n  goalkeepers,\n  defenders,\n  midfielders,\n  forwards\n}, newPlayers, position) => {\n  const team = [goalkeepers, defenders, midfielders, forwards, newPlayers];\n  team[position] = [];\n  let value = 0;\n  team.forEach(pos => pos.forEach(player => value += player.now_cost));\n  return value / 10;\n};\n\nconst validateTeam = (teamValue, prevPlayers, player, team) => {\n  const teamNames = ['Arsenal', 'Aston Villa', 'Bournemouth', 'Brighton', 'Burnley', 'Chelsea', 'Crystal Palace', 'Everton', 'Leicester City', 'Liverpool', 'Man City', 'Man Utd', 'Newcastle', 'Norwich', 'Sheffield Utd', 'Southampton', 'Spurs', 'Watford', 'West Ham', 'Wolves'];\n\n  if (teamValue > 100) {\n    return {\n      isValidated: false,\n      message: \"Team value too high to add \".concat(player.web_name, \".\")\n    };\n  }\n\n  if (isPlayerInTeam(player, prevPlayers)) {\n    return {\n      result: false,\n      message: \"\".concat(player.web_name, \" already in team.\")\n    };\n  }\n\n  if (tooManyPlayersFromOneTeamToInsert(player, team)) {\n    return {\n      result: false,\n      message: \"Already three players from \".concat(teamNames[player.team - 1], \".\")\n    };\n  }\n\n  return {\n    isValidated: true,\n    message: null\n  };\n};\n\nconst isPlayerInTeam = (player, prevPlayers) => {\n  const playerIds = prevPlayers.map(player => player.id);\n  return playerIds.includes(player.id);\n};\n\nconst tooManyPlayersFromOneTeamToInsert = (player, team) => {\n  const values = Object.values(team);\n  const teamIds = values.map(positions => positions.map(player => player.team));\n  const flattenedTeamIds = [].concat.apply([], teamIds);\n\n  if (flattenedTeamIds.filter(id => id === player.team).length > 2) {\n    return true;\n  }\n\n  return false;\n};","map":{"version":3,"sources":["C:\\Projects\\fantasy-football-app\\client\\src\\modules\\TeamSelector.js"],"names":["addToTeam","player","currentPlayers","maxAmount","team","prevPlayers","prevValue","getTeamValue","newPlayers","length","shift","newValue","element_type","result","validateTeam","isValidated","message","goalkeepers","defenders","midfielders","forwards","position","value","forEach","pos","now_cost","teamValue","teamNames","web_name","isPlayerInTeam","tooManyPlayersFromOneTeamToInsert","playerIds","map","id","includes","values","Object","teamIds","positions","flattenedTeamIds","concat","apply","filter"],"mappings":"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","sourcesContent":["export default function addToTeam(player, currentPlayers, maxAmount, team) {\r\n    const prevPlayers = currentPlayers\r\n    const prevValue = getTeamValue(team, currentPlayers, 4)\r\n    let newPlayers = []\r\n    if( currentPlayers.length === maxAmount ) {\r\n        currentPlayers.shift()     \r\n        newPlayers = [...currentPlayers, player]\r\n    } \r\n    newPlayers = [...currentPlayers, player]\r\n    const newValue = getTeamValue(team, newPlayers, player.element_type - 1)\r\n\r\n    let result = {}\r\n    const { isValidated, message } = validateTeam( newValue, prevPlayers, player, team) \r\n    isValidated ? result = { newPlayers, newValue } : result = { newPlayers: prevPlayers, newValue: prevValue, message }\r\n    return result\r\n}\r\n\r\nconst getTeamValue = ({ goalkeepers, defenders, midfielders, forwards }, newPlayers, position) => {\r\n\r\n    const team = [goalkeepers, defenders, midfielders, forwards, newPlayers]\r\n    team[position] = []\r\n    let value = 0\r\n    team.forEach(pos => pos.forEach(player => value += player.now_cost))\r\n    return value / 10\r\n}\r\n\r\nconst validateTeam = (teamValue, prevPlayers, player, team) => {\r\n    const teamNames = ['Arsenal', 'Aston Villa', 'Bournemouth', 'Brighton', 'Burnley', 'Chelsea', 'Crystal Palace', 'Everton', 'Leicester City', 'Liverpool', 'Man City', 'Man Utd', 'Newcastle', 'Norwich', 'Sheffield Utd', 'Southampton', 'Spurs', 'Watford', 'West Ham', 'Wolves']\r\n    if (teamValue > 100) {\r\n        return { isValidated: false, message: `Team value too high to add ${player.web_name}.` }\r\n    }\r\n    if (isPlayerInTeam(player, prevPlayers)) {\r\n        return { result: false, message: `${player.web_name} already in team.` }\r\n    }\r\n    if (tooManyPlayersFromOneTeamToInsert(player, team)) {\r\n        return { result: false, message: `Already three players from ${teamNames[player.team-1]}.` }\r\n    }\r\n    return { isValidated: true, message: null }\r\n}\r\n\r\nconst isPlayerInTeam = (player, prevPlayers) => {\r\n    const playerIds = prevPlayers.map(player => player.id)\r\n    return (playerIds.includes(player.id))\r\n}\r\n\r\nconst tooManyPlayersFromOneTeamToInsert = (player, team) => {\r\n    const values = Object.values(team)\r\n    const teamIds = values.map(positions => positions.map(player => player.team))\r\n    const flattenedTeamIds = [].concat.apply([], teamIds)\r\n    \r\n    if (flattenedTeamIds.filter(id => id === player.team).length > 2) {\r\n        return true\r\n    }\r\n    return false\r\n}"]},"metadata":{},"sourceType":"module"}