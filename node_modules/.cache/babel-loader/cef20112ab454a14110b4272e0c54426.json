{"ast":null,"code":"const axios = require('axios');\n\nexport default function addToTeam(player, currentPlayers, maxAmount, team) {\n  axios.post('/addPlayer', {\n    player,\n    currentPlayers,\n    maxAmount,\n    team\n  });\n} //     const prevPlayers = currentPlayers\n//     const prevValue = getTeamValue(team, currentPlayers, 4)\n//     const playerToBeRemoved = currentPlayers[0]\n//     let newPlayers = []\n//     if( currentPlayers.length === maxAmount ) {\n//         currentPlayers.shift()     \n//         newPlayers = [...currentPlayers, player]\n//     } \n//     newPlayers = [...currentPlayers, player]\n//     const newValue = getTeamValue(team, newPlayers, player.element_type - 1)\n//     let result = {}\n//     const { isValidated, message } = validateTeam( newValue, prevPlayers, player, team) \n//     if (!isValidated) {\n//         undoPlayerAdd(playerToBeRemoved, currentPlayers)\n//         result = { newPlayers: prevPlayers, newValue: prevValue, message }\n//         return result\n//     }\n//     result = { newPlayers, newValue }\n//     return result\n// }\n// const getTeamValue = ({ goalkeepers, defenders, midfielders, forwards }, newPlayers, position) => {\n//     const team = [goalkeepers, defenders, midfielders, forwards, newPlayers]\n//     team[position] = []\n//     let value = 0\n//     team.forEach(pos => pos.forEach(player => value += player.now_cost))\n//     return value / 10\n// }\n// const validateTeam = (teamValue, prevPlayers, player, team) => {\n//     const teamNames = ['Arsenal', 'Aston Villa', 'Bournemouth', 'Brighton', 'Burnley', 'Chelsea', 'Crystal Palace', 'Everton', 'Leicester City', 'Liverpool', 'Man City', 'Man Utd', 'Newcastle', 'Norwich', 'Sheffield Utd', 'Southampton', 'Spurs', 'Watford', 'West Ham', 'Wolves']\n//     if (teamValue > 100) {\n//         return { isValidated: false, message: `Team value too high to add ${player.web_name}.` }\n//     }\n//     if (isPlayerInTeam(player, prevPlayers)) {\n//         return { result: false, message: `${player.web_name} already in team.` }\n//     }\n//     if (tooManyPlayersFromOneTeamToInsert(player, team)) {\n//         return { result: false, message: `Already three players from ${teamNames[player.team-1]}.` }\n//     }\n//     return { isValidated: true, message: null }\n// }\n// const isPlayerInTeam = (player, prevPlayers) => {\n//     const playerIds = prevPlayers.map(player => player.id)\n//     return (playerIds.includes(player.id))\n// }\n// const tooManyPlayersFromOneTeamToInsert = (player, team) => {\n//     const values = Object.values(team)\n//     const teamIds = values.map(positions => positions.map(player => player.team))\n//     const flattenedTeamIds = [].concat.apply([], teamIds)\n//     if (flattenedTeamIds.filter(id => id === player.team).length > 2) {\n//         return true\n//     }\n//     return false\n// }\n// const undoPlayerAdd = (player, currentPlayers) => {\n//     currentPlayers.unshift(player)\n// }","map":{"version":3,"sources":["C:\\Projects\\fantasy-football-app\\client\\src\\modules\\TeamSelector.js"],"names":["axios","require","addToTeam","player","currentPlayers","maxAmount","team","post"],"mappings":"AAAA,MAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AAEA,eAAe,SAASC,SAAT,CAAmBC,MAAnB,EAA2BC,cAA3B,EAA2CC,SAA3C,EAAsDC,IAAtD,EAA4D;AACvEN,EAAAA,KAAK,CAACO,IAAN,CAAW,YAAX,EAAyB;AACrBJ,IAAAA,MADqB;AAErBC,IAAAA,cAFqB;AAGrBC,IAAAA,SAHqB;AAIrBC,IAAAA;AAJqB,GAAzB;AAMH,C,CAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA","sourcesContent":["const axios = require('axios')\r\n\r\nexport default function addToTeam(player, currentPlayers, maxAmount, team) {\r\n    axios.post('/addPlayer', {\r\n        player,\r\n        currentPlayers,\r\n        maxAmount,\r\n        team\r\n    })\r\n}\r\n    \r\n    \r\n//     const prevPlayers = currentPlayers\r\n//     const prevValue = getTeamValue(team, currentPlayers, 4)\r\n//     const playerToBeRemoved = currentPlayers[0]\r\n//     let newPlayers = []\r\n//     if( currentPlayers.length === maxAmount ) {\r\n//         currentPlayers.shift()     \r\n//         newPlayers = [...currentPlayers, player]\r\n//     } \r\n//     newPlayers = [...currentPlayers, player]\r\n//     const newValue = getTeamValue(team, newPlayers, player.element_type - 1)\r\n\r\n//     let result = {}\r\n//     const { isValidated, message } = validateTeam( newValue, prevPlayers, player, team) \r\n\r\n//     if (!isValidated) {\r\n//         undoPlayerAdd(playerToBeRemoved, currentPlayers)\r\n//         result = { newPlayers: prevPlayers, newValue: prevValue, message }\r\n//         return result\r\n//     }\r\n    \r\n//     result = { newPlayers, newValue }\r\n//     return result\r\n// }\r\n\r\n// const getTeamValue = ({ goalkeepers, defenders, midfielders, forwards }, newPlayers, position) => {\r\n\r\n//     const team = [goalkeepers, defenders, midfielders, forwards, newPlayers]\r\n//     team[position] = []\r\n//     let value = 0\r\n//     team.forEach(pos => pos.forEach(player => value += player.now_cost))\r\n//     return value / 10\r\n// }\r\n\r\n// const validateTeam = (teamValue, prevPlayers, player, team) => {\r\n//     const teamNames = ['Arsenal', 'Aston Villa', 'Bournemouth', 'Brighton', 'Burnley', 'Chelsea', 'Crystal Palace', 'Everton', 'Leicester City', 'Liverpool', 'Man City', 'Man Utd', 'Newcastle', 'Norwich', 'Sheffield Utd', 'Southampton', 'Spurs', 'Watford', 'West Ham', 'Wolves']\r\n//     if (teamValue > 100) {\r\n//         return { isValidated: false, message: `Team value too high to add ${player.web_name}.` }\r\n//     }\r\n//     if (isPlayerInTeam(player, prevPlayers)) {\r\n//         return { result: false, message: `${player.web_name} already in team.` }\r\n//     }\r\n//     if (tooManyPlayersFromOneTeamToInsert(player, team)) {\r\n//         return { result: false, message: `Already three players from ${teamNames[player.team-1]}.` }\r\n//     }\r\n//     return { isValidated: true, message: null }\r\n// }\r\n\r\n// const isPlayerInTeam = (player, prevPlayers) => {\r\n//     const playerIds = prevPlayers.map(player => player.id)\r\n//     return (playerIds.includes(player.id))\r\n// }\r\n\r\n// const tooManyPlayersFromOneTeamToInsert = (player, team) => {\r\n//     const values = Object.values(team)\r\n//     const teamIds = values.map(positions => positions.map(player => player.team))\r\n//     const flattenedTeamIds = [].concat.apply([], teamIds)\r\n    \r\n//     if (flattenedTeamIds.filter(id => id === player.team).length > 2) {\r\n//         return true\r\n//     }\r\n//     return false\r\n// }\r\n\r\n// const undoPlayerAdd = (player, currentPlayers) => {\r\n//     currentPlayers.unshift(player)\r\n// }"]},"metadata":{},"sourceType":"module"}